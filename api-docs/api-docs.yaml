openapi: 3.0.1
info:
  title: Book Application API
  description: Sample Spring Boot REST API application to manage books using springdoc-openapi
    and OpenAPI 3.
  contact:
    email: towerspro@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /books/{id}/comments:
    post:
      tags:
      - book-controller
      summary: Creates a new comment
      operationId: createComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "400":
          description: If one or more request parameters don't comply with the specification
        "500":
          description: If a runtime error occurs while processing the request
        "200":
          description: If the comment has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /books/:
    get:
      tags:
      - book-controller
      summary: Get a list of books
      operationId: getBooks
      responses:
        "500":
          description: If a runtime error occurs while processing the request
        "200":
          description: Returns the list of books
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book_Basic'
    post:
      tags:
      - book-controller
      summary: Creates a new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "400":
          description: If one or more request parameters don't comply with the specification
        "500":
          description: If a runtime error occurs while processing the request
        "200":
          description: If the book has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      tags:
      - book-controller
      summary: Get a book by its id
      operationId: getBookById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the book
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book_BookDetail'
        "400":
          description: Invalid id supplied
        "404":
          description: Book not found
    delete:
      tags:
      - book-controller
      summary: Delete a book by its id
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: If the book has been deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Invalid id supplied
        "404":
          description: Book not found
  /books/{bookId}/comments/{id}:
    get:
      tags:
      - book-controller
      summary: Get a comment by its id
      operationId: getCommentByBookAndId
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
        "200":
          description: Found the comment
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
        "400":
          description: Invalid id supplied
    delete:
      tags:
      - book-controller
      summary: Delete a comment by its id
      operationId: deleteComment
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
        "400":
          description: Invalid id supplied
        "204":
          description: If the comment has been deleted successfully
components:
  schemas:
    Comment:
      required:
      - text
      - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          maxLength: 20
          minLength: 2
          type: string
        text:
          maxLength: 200
          minLength: 3
          type: string
        rating:
          maximum: 5
          minimum: 0
          type: integer
          format: int32
    Book:
      required:
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          maxLength: 200
          minLength: 2
          type: string
        summary:
          type: string
        author:
          type: string
        publisher:
          type: string
        published_year:
          type: integer
          format: int32
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        commentsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Comment'
    Book_BookDetail:
      required:
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          maxLength: 200
          minLength: 2
          type: string
        summary:
          type: string
        author:
          type: string
        publisher:
          type: string
        published_year:
          type: integer
          format: int32
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment_BookDetail'
        commentsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Comment_BookDetail'
    Comment_BookDetail:
      required:
      - text
      - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          maxLength: 20
          minLength: 2
          type: string
        text:
          maxLength: 200
          minLength: 3
          type: string
        rating:
          maximum: 5
          minimum: 0
          type: integer
          format: int32
    Book_Basic:
      required:
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          maxLength: 200
          minLength: 2
          type: string
        commentsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Comment_Basic'
    Comment_Basic:
      type: object
